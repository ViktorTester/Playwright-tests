import {
    urls as url,
    testautomationpractice as tap
} from '/Users/aggro/WebstormProjects/Playwright tests/Locators/Locators.js'

const {test, expect} = require('@playwright/test')

test('Handling Pagination Tables', async ({page}) => {

    await page.goto(url.url4)

    // находим локатор таблица и заносим в переменную
    const table = await page.locator(tap.paginationTable)
    // обращаясь к локатору таблицы, находим общий локатор
    // всех колонок и заносим его в переменную
    const columns = await table.locator(tap.paginationTableColumns)

    // обращаясь к локатору таблицы, находим общий локатор
    // всех рядов и заносим его в переменную
    const rows = await table.locator(tap.paginationTableRows)

    // для самопроверки выводим в консоль количество колонок
    console.log('Number of columns = ', await columns.count())
    // для самопроверки выводим в консоль количество рядов
    console.log('Number of rows = ', await rows.count())

    // также создаем проверку на ожидаемое
    // количество рядов и колонок
    expect(await columns.count()).toBe(4)
    expect(await rows.count()).toBe(5)


// Как отметить чекбокс конкретного элемента в таблице
    // В конкретной таблице есть ячейки с чекбоксами
    // Задача - выбрать определенный продукт и отметить чекбокс этого продукта
    // продукт и его чекбокс находятся в разных столбцах, но в одном ряду.
    // И нужно указать системе, что отметить следует не любой чекбокс,
    // а именно тот, который относится в нужному продукту.
    // Как это сделать:

    // Применяется специальная функция .filter(), в которой нужно указать
    // критерии сортировки. Ранее мы уже нашли общий локатор для всех рядов,
    // а теперь, для каждого ряда, проводим сортировку. Как только находим
    // нужную ячейку - заносим ее в переменную
    const matchedRow = rows.filter({
        // сперва выбираем только элементы 'td', фактически перебираем ячейки
        has: page.locator('td'),
        // параллельно проверяем чтобы в ячейке был продукт с конкретным именем
        hasText: 'Product 4'
    })

    // ищем в найденном ряду элемент с локатором 'input' - это чекбокс и отмечаем его
    await matchedRow.locator(tap.tableCheckbox).check()

    // проверяем, что чекбокс отмечен
    await expect(matchedRow.locator(tap.tableCheckbox)).toBeChecked()


 // Как отметить несколько чекбоксов для нескольких элементов
    // Для этого потребуется вызывать написанный выше код для каждого
    // чекбокса заново. Поэтому мы засунем его в функцию,
    // во избежание дублирования кода.
    // Функция создается вне тела теста - selectProduct()

    // Так как мы хотим вызвать функцию трижды, а также трижды проверить
    // прожался ли чекбокс, но не хотим дублировать код,
    // есть возможность еще больше улучшить читаемость, путем создания
    // очередной функции - checkProductSelection()
    // функция создается внутри теста, так как внутри теста создаются и
    // переменные посредством функции selectProduct()
    async function checkProductSelection(productName) {
        // вызываем selectProduct()
        await selectProduct(rows, page, productName);
        // сразу же проверяем прожался ли чекбокс
        await expect(matchedRow.locator(tap.tableCheckbox)).toBeChecked();
    }

    await checkProductSelection('Product 1');
    await checkProductSelection('Product 3');
    await checkProductSelection('Product 5');


// как перебрать все значения на одной странице таблицы
    // в данном примере в таблице есть 4 колонки - ID, Name, Price, Select
    // мы хотим вывести все данные первых трех колонок для всех страниц
    // для этого понадобится вложенный цикл

    // внешний цикл перебирает все ряды
    for(let i = 0; i < await rows.count(); i++) {
        // создаем переменную для хранения всех данный одной строки
        // и обнуляем ее каждый раз, когда переходим к новой строке
        let text = ''
        // каждый ряд заносится в переменную
        const row = rows.nth(i);
        // все элементы 'td' заносится в переменную
        // элемент 'td' - это одна колонка в ряду
        const tds = row.locator('td')

        // внутренний цикл перебирает (все колонки в ряду минус 1)
        // так как последняя колонка нам не нужна
        for(let j = 0; j < await tds.count() - 1; j++) {
            // прибавляем значение каждого столбца конкретной строки к переменной
            text += ' | ' + await tds.nth(j).textContent() + ' | '
        }
        // выводим в консоль значения переменной, которое равно
        // всем текстовым данным конкретного ряда
        console.log(text)
    }

// как перебрать все значения на всех страницах таблицы
    // все очень просто - код, который перебирает все значения на одной странице,
    // нужно повторить столько раз, сколько страниц нужно перебрать.

    // получаем локатор общий для каждой страницы пагинации и заносим в переменную
    const pages = await page.locator(tap.allPagination)

    // для себя выводим в консоль общее количество страниц в таблице
    console.log(await pages.count())

    // начинаем цикл, на столько итераций, сколько всего страниц в таблице
    for(let p = 0; p < await pages.count(); p++) {

        // первая страница уже открыта, поэтому кликать на нее не надо
        // условие проверяет, что индекс страницы больше 0
        if(p > 0) {
            // у нас уже найден общий локатор для всех элементов пагинации
            // поэтому используем его, чтобы кликать на следующую страницу
            await pages.nth(p).click()
        }
        // а сюда просто копируем код для просмотра значений одной страницы
        // для читабельности лучше занести его в функцию
        for(let i = 0; i < await rows.count(); i++) {

            let text = ''
            const row = rows.nth(i);
            const tds = row.locator('td')

            for(let j = 0; j < await tds.count() - 1; j++) {
                text += ' | ' + await tds.nth(j).textContent() + ' | '
            }
            console.log(text)
        }
    }

})

// создана функция отмечающая чекбокс дял конкретного
// продукта и вынесена за пределы теста
async function selectProduct(rows, page, name) {
    const matchedRow = rows.filter({
        // сперва выбираем только элементы 'td', фактически перебираем ячейки
        has: page.locator('td'),
        // параллельно проверяем чтобы в ячейке был продукт с конкретным именем
        hasText: name
    })
    // ищем в найденном ряду элемент с локатором 'input' - это чекбокс и отмечаем его
    await matchedRow.locator(tap.tableCheckbox).check()
}
